defmodule PentagonNumbers do
  @moduledoc """
  Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
  1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
  It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
  Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
  """
  defp now(), do: :os.system_time(:milli_seconds)

  @spec pentagon(Integer) :: Integer
  def pentagon(n), do: div(n * (3 * n - 1), 2)

  def run() do
    start = now()
    res = find(1, [], [])
    timeuse = now() - start
    IO.puts("result ==> #{res}, timeuse ==> #{timeuse} milliseconds")
  end

  defp find(index, [], acc) do
    nacc = [pentagon(index + 1) | acc]
    find(index + 1, Enum.reverse(nacc), nacc)
  end

  defp find(index, [h | t], acc) do
    p = pentagon(index)

    cond do
      acc |> Enum.member?(p - h) and acc |> Enum.member?(p - h * 2) -> p - h * 2
      :else -> find(index, t, acc)
    end
  end
end
