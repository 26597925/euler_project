defmodule Euler152 do
  @moduledoc """
  https://projecteuler.net/problem=152
  """
  require Logger
  require Integer
  use Bitwise

  @type int :: non_neg_integer
  @type ints :: [int]

  @spec lcm(int, int) :: int
  def lcm(a, b), do: div(a * b, Integer.gcd(a, b))

  @spec lcm_list(ints) :: int
  def lcm_list(list), do: lcl(list, 1)
  defp lcl([], acc), do: acc
  defp lcl([h | t], acc), do: lcl(t, lcm(h, acc))

  @spec all_sums(ints) :: map()
  def all_sums(list), do: allsums(list, %{0 => 1})

  defp allsums([], combos), do: combos

  defp allsums([h | t], combos) do
    ncombos =
      Map.to_list(combos)
      |> Enum.reduce(combos, fn {t, n}, acc -> Map.update(acc, t + h, n, &(&1 + n)) end)

    allsums(t, ncombos)
  end


  def solution() do
    denoimators = 2..80 |> Enum.map(fn x -> x * x end)
    d = lcm_list(denoimators)
    # inverse = Enum.map(denoimators, fn x -> div(d, x) end)
    target = div(d, 2)

    inverse = [
      335_444_906_300_951_944_045_898_802_381_428_541_372_787_072_292_362_565_161_843_560_000,
      1_341_779_625_203_807_776_183_595_209_525_714_165_491_148_289_169_450_260_647_374_240_000,
      292_209_785_044_384_804_591_094_067_852_266_640_484_738_960_752_458_056_763_205_945_600,
      202_923_461_836_378_336_521_593_102_675_185_167_003_290_944_966_984_761_641_115_240_000,
      5_367_118_500_815_231_104_734_380_838_102_856_661_964_593_156_677_801_042_589_496_960_000,
      519_484_062_301_128_541_495_278_342_848_474_027_528_424_819_115_480_989_801_255_014_400,
      4_675_356_560_710_156_873_457_505_085_636_266_247_755_823_372_039_328_908_211_295_129_600,
      6_224_587_137_040_149_683_597_270_084_426_981_690_799_173_128_454_727_836_375_984_640_000,
      12_987_101_557_528_213_537_381_958_571_211_850_688_210_620_477_887_024_745_031_375_360_000,
      1_168_839_140_177_539_218_364_376_271_409_066_561_938_955_843_009_832_227_052_823_782_400,
      3_246_775_389_382_053_384_345_489_642_802_962_672_052_655_119_471_756_186_257_843_840_000,
      811_693_847_345_513_346_086_372_410_700_740_668_013_163_779_867_939_046_564_460_960_000,
      657_472_016_349_865_810_329_961_652_667_599_941_090_662_661_693_030_627_717_213_377_600,
      42_078_209_046_391_411_861_117_545_770_726_396_229_802_410_348_353_960_173_901_656_166_400,
      858_738_960_130_436_976_757_500_934_096_457_065_914_334_905_068_448_166_814_319_513_600,
      262_988_806_539_946_324_131_984_661_067_039_976_436_265_064_677_212_251_086_885_351_040_000,
      214_684_740_032_609_244_189_375_233_524_114_266_478_583_726_267_112_041_703_579_878_400,
      596_346_500_090_581_233_859_375_648_678_095_184_662_732_572_964_200_115_843_277_440_000,
      2_629_888_065_399_463_241_319_846_610_670_399_764_362_650_646_772_122_510_868_853_510_400,
      16_436_800_408_746_645_258_249_041_316_689_998_527_266_566_542_325_765_692_930_334_440_000,
      1_826_311_156_527_405_028_694_337_924_076_666_503_029_618_504_702_862_854_770_037_160_000,
      116_883_914_017_753_921_836_437_627_140_906_656_193_895_584_300_983_222_705_282_378_240_000,
      2_385_386_000_362_324_935_437_502_594_712_380_738_650_930_291_856_800_463_373_109_760_000,
      691_620_793_004_461_075_955_252_231_602_997_965_644_352_569_828_303_092_930_664_960_000,
      10_519_552_261_597_852_965_279_386_442_681_599_057_450_602_587_088_490_043_475_414_041_600,
      65_747_201_634_986_581_032_996_165_266_759_994_109_066_266_169_303_062_771_721_337_760_000,
      265_042_888_929_147_215_048_611_399_412_486_748_738_992_254_650_755_607_041_456_640_000,
      389_036_696_065_009_355_224_829_380_276_686_355_674_948_320_528_420_489_773_499_040_000,
      21_468_474_003_260_924_418_937_523_352_411_426_647_858_372_626_711_204_170_357_987_840_000,
      29_220_978_504_438_480_459_109_406_785_226_664_048_473_896_075_245_805_676_320_594_560_000,
      7_305_244_626_109_620_114_777_351_696_306_666_012_118_474_018_811_451_419_080_148_640_000
    ]

    [_ | t] = inverse
    left = all_sums(inverse |> Enum.take_every(2))
    right = all_sums(t |> Enum.take_every(2))

    left
    |> Map.to_list()
    |> Enum.map(fn {x, n} ->
      case Map.fetch(right, target - x) do
        {:ok, v} -> v * n
        :error -> 0
      end
    end)
    |> Enum.sum()
  end
end
