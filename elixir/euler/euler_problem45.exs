defmodule TPH do
  @moduledoc """
  Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

  Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
  Pentagonal	 	Pn=n(3nâˆ’1)/2	 	1, 5, 12, 22, 35, ...
  Hexagonal	 	Hn=n(2nâˆ’1)	 	1, 6, 15, 28, 45, ...
  It can be verified that T285 = P165 = H143 = 40755.

  Find the next triangle number that is also pentagonal and hexagonal.
  """

  @spec triangle(Integer) :: Integer
  def triangle(n), do: div(n * (n + 1), 2)

  @spec pentagon(Integer) :: Integer
  def pentagon(n), do: div(n * (3 * n - 1), 2)

  @spec hexagon(Integer) :: Integer
  def hexagon(n), do: n * (2 * n - 1)

  @spec pentagon?(Integer) :: boolean
  def pentagon?(x), do: pentagon?(x, 1)
  defp pentagon?(x, index) do
    y = pentagon(index)
    cond do
      x == y -> true
      x > y -> pentagon?(x, index + 1)
      :else -> false
    end
  end

  @spec hexagon(Integer) :: boolean
  def hexagon?(x), do: hexagon?(x, 1)
  defp hexagon?(x, index) do
    y = hexagon(index)
    cond do
      y == x -> true
      x > y -> hexagon?(x, index + 1)
      :else -> false
    end
  end

  def find(x), do: 1..x |> Stream.map(fn x -> triangle(x) end) |> Stream.filter(fn x -> pentagon?(x) end) |> Stream.filter(fn x -> hexagon?(x) end) |> Enum.to_list()

end
